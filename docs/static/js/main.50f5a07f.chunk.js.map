{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","setEventListener","mediaConnection","on","stream","videoElm","document","getElementById","srcObject","play","handleChangeTheirId","event","setState","theirId","target","value","state","localStream","myId","peer","Peer","key","process","debug","navigator","mediaDevices","getUserMedia","video","audio","then","catch","error","console","this","id","answer","call","className","width","autoPlay","muted","playsInline","type","onChange","onClick","makeCall","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wQA8EeA,G,wDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsCRC,iBAAmB,SAACC,GAClBA,EAAgBC,GAAG,UAAU,SAAAC,GAC3B,IAAMC,EAAWC,SAASC,eAAe,eACzCF,EAASG,UAAYJ,EACrBC,EAASI,WA3CM,EA+CnBC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAACC,QAASF,EAAMG,OAAOC,SA9CrC,EAAKC,MAAQ,CACXC,YAAa,KACbC,KAAM,GACNL,QAAS,IAEX,EAAKM,KAAO,IAAIC,IAAK,CACnBC,IAAKC,uCACLC,MAAO,IATQ,E,gEAaE,IAAD,OAClBC,UAAUC,aAAaC,aAAa,CAACC,OAAO,EAAMC,OAAO,IACtDC,MAAM,SAAAzB,GACP,IAAMC,EAAWC,SAASC,eAAe,YACzCF,EAASG,UAAYJ,EACrBC,EAASI,OACT,EAAKG,SAAS,CAACK,YAAab,OAC3B0B,OAAO,SAAAC,GACRC,QAAQD,MAAM,oCAAqCA,MAIrDE,KAAKd,KAAKhB,GAAG,QAAQ,WACnB,EAAKS,SAAS,CAACM,KAAM,EAAKC,KAAKe,QAEjCD,KAAKd,KAAKhB,GAAG,QAAQ,SAAAD,GACnBA,EAAgBiC,OAAO,EAAKnB,MAAMC,aAClC,EAAKhB,iBAAiBC,Q,iCAKxB,IAAMA,EAAkB+B,KAAKd,KAAKiB,KAAKH,KAAKjB,MAAMH,QAASoB,KAAKjB,MAAMC,aACtEgB,KAAKhC,iBAAiBC,K,+BAed,IAAD,OACP,OACE,sBAAKmC,UAAU,MAAf,UACE,oBAAIA,UAAU,OAAd,2BACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACE,uBAAOH,GAAG,WAAWI,MAAM,QAAQC,UAAQ,EAACC,OAAK,EAACC,aAAW,IAC7D,uCAAUR,KAAKjB,MAAME,QACrB,gCACE,uBAAOwB,KAAK,OAAO3B,MAAOkB,KAAKjB,MAAMH,QAAS8B,SAAUV,KAAKvB,sBAC7D,wBAAQkC,QAAS,kBAAM,EAAKC,YAA5B,gCAGJ,qBAAKR,UAAU,aAAf,SACE,uBAAOH,GAAG,cAAcI,MAAM,QAAQC,UAAQ,EAACE,aAAW,gB,GAlEpDK,IAAMC,YCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASC,eAAe,SAM1ByC,M","file":"static/js/main.50f5a07f.chunk.js","sourcesContent":["import React from 'react';\nimport Peer from 'skyway-js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      localStream: null,\n      myId: \"\",\n      theirId: \"\",\n    };\n    this.peer = new Peer({\n      key: process.env.REACT_APP_SKYWAY_API_KEY,\n      debug: 3\n    });\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices.getUserMedia({video: true, audio: true})\n      .then( stream => {\n      const videoElm = document.getElementById('my-video');\n      videoElm.srcObject = stream;\n      videoElm.play();\n      this.setState({localStream: stream})\n    }).catch( error => {\n      console.error('mediaDevice.getUserMedia() error:', error);\n      return;\n    });\n\n    this.peer.on('open', () => {\n      this.setState({myId: this.peer.id})\n    });\n    this.peer.on('call', mediaConnection => {\n      mediaConnection.answer(this.state.localStream);\n      this.setEventListener(mediaConnection);\n    });\n  }\n\n  makeCall() {\n    const mediaConnection = this.peer.call(this.state.theirId, this.state.localStream);\n    this.setEventListener(mediaConnection);\n  }\n\n  setEventListener = (mediaConnection) => {\n    mediaConnection.on('stream', stream => {\n      const videoElm = document.getElementById('their-video')\n      videoElm.srcObject = stream;\n      videoElm.play();\n    });\n  }\n\n  handleChangeTheirId = (event) => {\n    this.setState({theirId: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Head\">Skyway sample</h1>\n        <div className=\"Container\">\n          <div className=\"MyVideo\">\n            <video id=\"my-video\" width=\"400px\" autoPlay muted playsInline></video>\n            <p>MyID: {this.state.myId}</p>\n            <div>\n              <input type=\"text\" value={this.state.theirId} onChange={this.handleChangeTheirId} />\n              <button onClick={() => this.makeCall()}>発信</button>\n            </div>\n          </div>\n          <div className=\"TheirVideo\">\n            <video id=\"their-video\" width=\"400px\" autoPlay playsInline></video>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}